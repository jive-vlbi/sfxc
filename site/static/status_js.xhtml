<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html 
      PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink">
<head>

<style>
html {background-color:#eeeeee}
body {
      background-color:#ccffcc;
      font-family:Tahoma,Arial,Helvetica,sans-serif;
      font-size:12px;
	  margin-left:15%; 
	  margin-right:15%;
	  border:3px groove #006600; 
	  padding:15px
	 }
h1   {
      text-align:left;
      font-size:1.5em;
      font-weight:bold
     }
</style>

<script type="text/javascript"><![CDATA[
var initialized = 0; 
var status=false;

var header_inited=false;

function update_svg_header(svgdoc)
{
  if( var_header_inited )
  {
  
  }else
  {
  
  }    
}

function update_svg_correlatornode(svgdoc, nodeinfo, statinfo)
{
  name = nodeinfo.name
  nload = svgdoc.getElementById(name+"_innerbox");
  ntext = document.getElementById(name+"_textload");
                	 
  if( nodeinfo.current_fft < nodeinfo.total_fft ){
    load = (1.0*statinfo.curr_fft+statinfo.diff_fft)/(nodeinfo.total_fft)*100;
    if( load >= 98 ) load = 98;
  }else{ load = 100; }
  lwidth = width*load/100;
  nload.setAttributeNS(null, "width", ""+(lwidth-4));
  ntext.textContent = ""+Math.round(load, 0)+"%"; 
}

var status_client = {}

// handle onreadystatechange event of req object
function processReqChange(){
    if (req.readyState == 4) {
        // only if "OK"
        if (req.status == 200) 
         {
            div = document.getElementById("details");
            div.innerHTML += "Hellllllllllllllllo";
   
            status = eval('(' + req.responseText + ')');
            
                       
            svgimg = document.getElementById("svgbox");
            width = 80
            height = 20
            spacing = 3
            yspacing = 10
            numcol = 1024/(80+spacing)
            if( svgimg ){
              x=10, y=100 
              for( var i=1, len=status.correlationnode.length ; i < len+1; ++i){
                  if( initialized == 0){
              
                  name = status.correlationnode[i-1].name
 
                  status_client[name] = {}
                  status_client[name].diff_fft = 0
                  status_client[name].curr_fft = 0
                  
 
                  rect = document.createElementNS("http://www.w3.org/2000/svg","rect");
		              rect.setAttributeNS(null, "id", name+"_box");
		              rect.setAttributeNS(null, "x", ""+x);
            	    rect.setAttributeNS(null, "y", ""+y);
            	    rect.setAttributeNS(null, "ry", "5");
            	    rect.setAttributeNS(null, "width", ""+width);
            	    rect.setAttributeNS(null, "height", ""+height);
            	    rect.setAttributeNS(null, "stroke", "black");
		              rect.setAttributeNS(null, "fill", "url(#grad1)");
	                //rect.setAttributeNS(null, "fill", "red");
	                svgimg.appendChild(rect);
                 
                  load = (1.0*status.correlationnode[i-1].current_fft)/(status.correlationnode[i-1].total_fft)*100;
                  lwidth = width*load/100.0
                  rect = document.createElementNS("http://www.w3.org/2000/svg","rect");
	                rect.setAttributeNS(null, "id", name+"_innerbox");
		              rect.setAttributeNS(null, "x", ""+(x+2) );
            	    rect.setAttributeNS(null, "y", ""+(y+2) );
            	    rect.setAttributeNS(null, "ry", "5");
            	    rect.setAttributeNS(null, "width", ""+(lwidth-4));
            	    rect.setAttributeNS(null, "height", ""+(height-4));
            	    rect.setAttributeNS(null, "stroke", "black");
		              rect.setAttributeNS(null, "fill", "url(#grad2)");
	                //rect.setAttributeNS(null, "fill", "blue");
	                svgimg.appendChild(rect);

                  // Status text.
                  text = document.createElementNS("http://www.w3.org/2000/svg","text");
		              text.setAttributeNS(null, "id", name+"_textload");
		              text.setAttributeNS(null, "x", ""+(x+10) );
            	    text.setAttributeNS(null, "y", ""+(y+height/2+10));
		              text.textContent = ""+Math.round(load)+"%";            	
		              text.setAttributeNS(null, "style", "font-size:12px;font-style:normal;font-weight:normal;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;font-family:Bitstream Vera Sans");
	                svgimg.appendChild(text);
                 }
                 else{
                    name = status.correlationnode[i-1].name
                    
                    if(status.correlationnode[i-1].current_fft != status_client[name].curr_fft){
                      status_client[name].diff_fft = 0
                      status_client[name].curr_fft = status.correlationnode[i-1].current_fft
                    }
                    
                    update_svg_correlatornode(document,  status.correlationnode[i-1],  status_client[name])                
                 }
                 x += width+spacing
                 if( i%8 == 0 ){
                  x = 10;
                  y += height+yspacing;
                 } 
                 
              }
              initialized = 1; 
                
              
              div.innerHTML += "but I find something"
            }
         } else {
            alert("There was a problem retrieving the XML data:\n" +
                req.statusText);
         }
    }
}


var counter=0;
function update_content()
{
  if( (counter >= 1000) || status == false ){
    div = document.getElementById("details");
    div.innerHTML = "ONCLICK["+counter+"]";        
    onClick();
    counter = 0;
  }else{
    if( status != false){
      div = document.getElementById("details");
      div.innerHTML = "B["+counter+"]";        

      for( var i=0, len=status.correlationnode.length ; i < len; ++i){
        name = status.correlationnode[i].name
        if( status_client[name].diff_fft < 1000 ){
         status_client[name].diff_fft+=100;
         update_svg_correlatornode(document, status.correlationnode[i], status_client[name])
        }else{ status_client[name].diff_fft = 1000; }
      }
    }else{
      div = document.getElementById("details");
      div.innerHTML = "A["+counter+"]";        
    }
    counter+=1  
  }
}

function onClick(){
  div = document.getElementById("details");
  div.innerHTML = "Hellllllllllllllllo";        
  div.innerHTML += "Loading";
  //loadXMLDoc('http://www.mozilla.org/');
  
  loadXMLDoc("http://localhost:8080/cgi-bin/status_json.py");
  //processReqChange();
  div.innerHTML += "Terminated";
}

// global flag
var isIE = false;

// global request and XML document objects
var req;

// retrieve XML document (reusable generic function);
// parameter is URL string (relative or complete) to
// an .xml file whose Content-Type is a valid XML
// type, such as text/xml; XML source must be from
// same domain as HTML file
function loadXMLDoc(url) {
    // branch for native XMLHttpRequest object
    if (window.XMLHttpRequest) {
        //document.write("ZUt")
        req = new XMLHttpRequest();
       
        req.onreadystatechange = processReqChange;
        req.onprogress = onProgress
        //div = document.getElementById("details");
        //div.innerHTML += "ENTERING <br>";        
  
        req.open("POST", url, true);
        req.send(null);
       
        //div.innerHTML += "REQ FINIE <br>";        
  
        //processReqChange()
    // branch for IE/Windows ActiveX version
    } else if (window.ActiveXObject) {
        isIE = true;
        req = new ActiveXObject("Microsoft.XMLHTTP");
        if (req) {
            req.onreadystatechange = processReqChange;
            req.open("GET", url, false);
            req.send();
        }
    }
}

function timerRefresh()
{
  onClick();
  //update_content();  
  setTimeout("timerRefresh()", 2000);
  counter += 50;
}

function initAll()
{  
  counter = 0;
  setTimeout("timerRefresh()", 1);
}

function onProgress(e) {
  var percentComplete = (e.position / e.totalSize)*100;
}

]]></script>
</head>

<body onload="initAll()">

<h1><center>SFXC Monitor</center></h1>
<div id="details" onclick="onClick();">Click me ?</div>
<a href="" onclick="onClick();">Ok I'm a link</a>

<object id="AdobeSVG" classid="clsid:78156a80-c6a1-4bbf-8e6a-3cd390eeb4e2"> </object>
<?import namespace="svg" urn="http://www.w3.org/2000/svg" implementation="#AdobeSVG"?>

<svg:svg version="1.1" baseProfile="full" width="100%" height="100%" id="svgbox"
   xmlns="http://www.w3.org/2000/svg" 
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink">  


   <defs>
     <radialGradient id="grad1" cx="25%" cy="25%" r="400%">
      <stop offset="0%" stop-color="white"/>
      <stop offset="100%" stop-color="black"/>
    </radialGradient>
    
    <radialGradient id="grad2" cx="25%" cy="25%" r="100%">
      <stop offset="0%" stop-color="yellow"/>
      <stop offset="100%" stop-color="#66ff00"/>
    </radialGradient>
    
    <radialGradient id="grad3" cx="50%" cy="50%" r="44%">
      <stop offset="0%" stop-color="#9999ff"/>
      <stop offset="100%" stop-color="white"/>
    </radialGradient>
 </defs>

    
   <svg:rect
       width="100%"
       height="10%"
       ry="3%"
       x="0"
       y="0"
       style="opacity:0.83177574;color:#000000;fill:url(#grad1);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.41400003;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible;enable-background:accumulate"
       id="topbar" />
  
  <svg:rect
       width="100%"
       height="70%"
       ry="3%"
       x="0"
       y="11%"
       style="opacity:0.83177574;color:#000000;fill:url(#grad1);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.41400003;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible;enable-background:accumulate"
       id="midbar" />

  <svg:rect
       width="100%"
       height="10%"
       ry="3%"
       x="0"
       y="82%"
       style="opacity:0.83177574;color:#000000;fill:url(#grad1);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1.41400003;stroke-linecap:butt;stroke-linejoin:miter;marker:none;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;visibility:visible;display:inline;overflow:visible;enable-background:accumulate"
       id="bottombar" />

</svg:svg>


</body>
</html>
